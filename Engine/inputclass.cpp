////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	inputclass.cpp
//
// summary:	Implements the inputclass class
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "inputclass.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> Default constructor. </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
InputClass::InputClass()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> Empty copy constructor. (See reason in systemclass) </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
///
/// <param name="other"> The other. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
InputClass::InputClass(const InputClass& other)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> Empty destructor. (See reason in systemclass) </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
InputClass::~InputClass()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> Initialize all the keys to being released and not pressed. </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
void InputClass::Initialize()
{
	int i;
	
	for(i=0; i<256; i++)
	{
		m_keys[i] = false;
	}

	return;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> If a key is pressed then save that state in the key array. </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
///
/// <param name="input"> The input. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void InputClass::KeyDown(unsigned int input)
{
	m_keys[input] = true;
	return;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> If a key is released then clear that state in the key array. </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
///
/// <param name="input"> The input. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void InputClass::KeyUp(unsigned int input)
{
	m_keys[input] = false;
	return;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> Return what state the key is in (pressed/not pressed). </summary>
///
/// <remarks> Filipe, 25 Nov 2012. </remarks>
///
/// <param name="key"> The key. </param>
///
/// <returns> true if key down, false if not. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
bool InputClass::IsKeyDown(unsigned int key)
{
	return m_keys[key];
}